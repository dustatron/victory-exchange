{"ast":null,"code":"var _jsxFileName = \"/Users/dusty/Dropbox/Code/React/victory-exchange/auth-test/src/components/App.js\";\nimport React, { useState, useEffect } from 'react'; // import React from 'react';\n// import { Container, Card, Row, Col } from 'react-bootstrap';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'; // import { useFirestoreConnect, isLoaded } from 'react-redux-firebase';\n//Routes\n\nimport SignedIn from './SignedIn';\nimport Login from './Login';\nimport Signup from './Signup';\nimport Home from './Home';\nimport { AuthProvider } from './Auth';\nimport PrivateRoute from './PrivateRoute';\nimport Header from './Header'; //Firebase\n// import StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nimport firebase from 'firebase';\n\nfunction onAuthStateChange(callback) {\n  return firebase.auth().onAuthStateChanged(user => {\n    if (user) {\n      callback({\n        loggedIn: true\n      });\n      console.log('The user is logged in');\n    } else {\n      callback({\n        loggedIn: false\n      });\n      console.log('The user is signed out');\n    }\n  });\n}\n\nfunction App(props) {\n  const [user, setUser] = useState({\n    loggedIn: false\n  }); // const auth = firebase.auth();\n  // Configure FirebaseUI.\n  // const uiConfig = {\n  //   // Popup signin flow rather than redirect flow.\n  //   // signInFlow: 'popup',\n  //   // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  //   signInSuccessUrl: '/signedIn',\n  //   // We will display Google and Facebook as auth providers.\n  //   signInOptions: [\n  //     firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n  //     { provider: firebase.auth.EmailAuthProvider.PROVIDER_ID, requireDisplayName: true }\n  //   ]\n  //   // callbacks: {\n  //   //   // Avoid redirects after sign-in.\n  //   //   signInSuccessWithAuthResult: setSignedInState(true)\n  //   // }\n  // };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange(setUser);\n    return () => {\n      unsubscribe();\n    };\n  }, []); // if (isLoaded(auth) && auth.currentUser !== null) {\n  //   return <span>User is logged in</span>;\n  // } else {\n  //   return (\n  //     <span>\n  //       <LoginView />\n  //     </span>\n  //   );\n  // }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AuthProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PrivateRoute, {\n    exact: true,\n    path: \"/\",\n    component: Home,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/login\",\n    component: Login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/signedin\",\n    component: SignedIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/signup\",\n    component: Signup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dusty/Dropbox/Code/React/victory-exchange/auth-test/src/components/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","SignedIn","Login","Signup","Home","AuthProvider","PrivateRoute","Header","firebase","onAuthStateChange","callback","auth","onAuthStateChanged","user","loggedIn","console","log","App","props","setUser","unsubscribe"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;AACA;;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD,C,CACA;AAEA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,YAAT,QAA6B,QAA7B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;AACA;;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,SAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AACnC,SAAOF,QAAQ,CAACG,IAAT,GAAgBC,kBAAhB,CAAoCC,IAAD,IAAU;AAClD,QAAIA,IAAJ,EAAU;AACRH,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,QAAQ,EAAE;AAAZ,OAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,KAHD,MAGO;AACLN,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,QAAQ,EAAE;AAAZ,OAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;AACF,GARM,CAAP;AASD;;AAED,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAM,CAAEL,IAAF,EAAQM,OAAR,IAAoBxB,QAAQ,CAAC;AAAEmB,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAAlC,CADkB,CAGlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,WAAW,GAAGX,iBAAiB,CAACU,OAAD,CAArC;AACA,WAAO,MAAM;AACXC,MAAAA,WAAW;AACZ,KAFD;AAGD,GALQ,EAKN,EALM,CAAT,CAtBkB,CA6BlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,KAAK,MAAnB;AAAoB,IAAA,IAAI,EAAC,GAAzB;AAA6B,IAAA,SAAS,EAAEhB,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,QAAlB;AAA2B,IAAA,SAAS,EAAEF,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,WAAlB;AAA8B,IAAA,SAAS,EAAED,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,SAAlB;AAA4B,IAAA,SAAS,EAAEE,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CAFF,CADF,CADF;AAeD;;AAED,eAAec,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import React from 'react';\n// import { Container, Card, Row, Col } from 'react-bootstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// import { useFirestoreConnect, isLoaded } from 'react-redux-firebase';\n\n//Routes\nimport SignedIn from './SignedIn';\nimport Login from './Login';\nimport Signup from './Signup';\nimport Home from './Home';\nimport { AuthProvider } from './Auth';\nimport PrivateRoute from './PrivateRoute';\nimport Header from './Header';\n\n//Firebase\n// import StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\nfunction onAuthStateChange(callback) {\n  return firebase.auth().onAuthStateChanged((user) => {\n    if (user) {\n      callback({ loggedIn: true });\n      console.log('The user is logged in');\n    } else {\n      callback({ loggedIn: false });\n      console.log('The user is signed out');\n    }\n  });\n}\n\nfunction App(props) {\n  const [ user, setUser ] = useState({ loggedIn: false });\n\n  // const auth = firebase.auth();\n\n  // Configure FirebaseUI.\n  // const uiConfig = {\n  //   // Popup signin flow rather than redirect flow.\n  //   // signInFlow: 'popup',\n  //   // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  //   signInSuccessUrl: '/signedIn',\n  //   // We will display Google and Facebook as auth providers.\n  //   signInOptions: [\n  //     firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n  //     { provider: firebase.auth.EmailAuthProvider.PROVIDER_ID, requireDisplayName: true }\n  //   ]\n  //   // callbacks: {\n  //   //   // Avoid redirects after sign-in.\n  //   //   signInSuccessWithAuthResult: setSignedInState(true)\n  //   // }\n  // };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange(setUser);\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  // if (isLoaded(auth) && auth.currentUser !== null) {\n  //   return <span>User is logged in</span>;\n  // } else {\n  //   return (\n  //     <span>\n  //       <LoginView />\n  //     </span>\n  //   );\n  // }\n\n  return (\n    <React.Fragment>\n      <AuthProvider>\n        <Header />\n        <Router>\n          <div>\n            <PrivateRoute exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signedin\" component={SignedIn} />\n            <Route exact path=\"/signup\" component={Signup} />\n          </div>\n        </Router>\n      </AuthProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}