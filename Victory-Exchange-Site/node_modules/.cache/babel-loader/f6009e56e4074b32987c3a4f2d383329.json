{"ast":null,"code":"var _jsxFileName = \"/Users/dusty/Dropbox/Code/React/victory-exchange/auth-test/src/components/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Card, Row, Col } from 'react-bootstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useFirestoreConnect, isLoaded } from 'react-redux-firebase'; //Routes\n\nimport SignedIn from './SignedIn';\nimport LoginView from './LoginView'; //Firebase\n// import StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nimport firebase from 'firebase';\n\nfunction onAuthStateChange(callback) {\n  return firebase.auth().onAuthStateChanged(user => {\n    if (user) {\n      callback({\n        loggedIn: true\n      });\n      console.log('The user is logged in');\n    } else {\n      callback({\n        loggedIn: false\n      });\n      console.log('The user is not logged in');\n    }\n  });\n}\n\nfunction App(props) {\n  const [user, setUser] = useState({\n    loggedIn: false\n  });\n  const auth = firebase.auth(); // Configure FirebaseUI.\n  // const uiConfig = {\n  //   // Popup signin flow rather than redirect flow.\n  //   // signInFlow: 'popup',\n  //   // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  //   signInSuccessUrl: '/signedIn',\n  //   // We will display Google and Facebook as auth providers.\n  //   signInOptions: [\n  //     firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n  //     { provider: firebase.auth.EmailAuthProvider.PROVIDER_ID, requireDisplayName: true }\n  //   ]\n  //   // callbacks: {\n  //   //   // Avoid redirects after sign-in.\n  //   //   signInSuccessWithAuthResult: setSignedInState(true)\n  //   // }\n  // };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange(setUser);\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  if (isLoaded(auth) && auth.currentUser !== null) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 12\n      }\n    }, \"User is logged in\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LoginView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }));\n  } // return (\n  //   <Router>\n  //     <Switch>\n  //       <Route path=\"/signedIn\">\n  //         <SignedIn />\n  //       </Route>\n  //       <Route path=\"/\">\n  //         <Container>\n  //           <Row>\n  //             <Col md={{ span: 6, offset: 3 }}>\n  //               <Card>\n  //                 <Card.Header>\n  //                   <h1 className=\"text-center\">My App</h1>\n  //                   <p className=\"text-center\">Please sign-in:</p>\n  //                 </Card.Header>\n  //                 <Card.Body>\n  //                   <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n  //                 </Card.Body>\n  //               </Card>\n  //             </Col>\n  //           </Row>\n  //         </Container>\n  //       </Route>\n  //     </Switch>\n  //   </Router>\n  // );\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dusty/Dropbox/Code/React/victory-exchange/auth-test/src/components/App.js"],"names":["React","useState","useEffect","Container","Card","Row","Col","BrowserRouter","Router","Switch","Route","useFirestoreConnect","isLoaded","SignedIn","LoginView","firebase","onAuthStateChange","callback","auth","onAuthStateChanged","user","loggedIn","console","log","App","props","setUser","unsubscribe","currentUser"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,iBAA1C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,sBAA9C,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,SAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AACnC,SAAOF,QAAQ,CAACG,IAAT,GAAgBC,kBAAhB,CAAoCC,IAAD,IAAU;AAClD,QAAIA,IAAJ,EAAU;AACRH,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,QAAQ,EAAE;AAAZ,OAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,KAHD,MAGO;AACLN,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,QAAQ,EAAE;AAAZ,OAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD;AACF,GARM,CAAP;AASD;;AAED,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAM,CAAEL,IAAF,EAAQM,OAAR,IAAoBzB,QAAQ,CAAC;AAAEoB,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAAlC;AAEA,QAAMH,IAAI,GAAGH,QAAQ,CAACG,IAAT,EAAb,CAHkB,CAKlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,WAAW,GAAGX,iBAAiB,CAACU,OAAD,CAArC;AACA,WAAO,MAAM;AACXC,MAAAA,WAAW;AACZ,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;;AAOA,MAAIf,QAAQ,CAACM,IAAD,CAAR,IAAkBA,IAAI,CAACU,WAAL,KAAqB,IAA3C,EAAiD;AAC/C,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GArCiB,CAuClB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;;AAED,eAAeJ,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Card, Row, Col } from 'react-bootstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useFirestoreConnect, isLoaded } from 'react-redux-firebase';\n\n//Routes\nimport SignedIn from './SignedIn';\nimport LoginView from './LoginView';\n\n//Firebase\n// import StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\nfunction onAuthStateChange(callback) {\n  return firebase.auth().onAuthStateChanged((user) => {\n    if (user) {\n      callback({ loggedIn: true });\n      console.log('The user is logged in');\n    } else {\n      callback({ loggedIn: false });\n      console.log('The user is not logged in');\n    }\n  });\n}\n\nfunction App(props) {\n  const [ user, setUser ] = useState({ loggedIn: false });\n\n  const auth = firebase.auth();\n\n  // Configure FirebaseUI.\n  // const uiConfig = {\n  //   // Popup signin flow rather than redirect flow.\n  //   // signInFlow: 'popup',\n  //   // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  //   signInSuccessUrl: '/signedIn',\n  //   // We will display Google and Facebook as auth providers.\n  //   signInOptions: [\n  //     firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n  //     { provider: firebase.auth.EmailAuthProvider.PROVIDER_ID, requireDisplayName: true }\n  //   ]\n  //   // callbacks: {\n  //   //   // Avoid redirects after sign-in.\n  //   //   signInSuccessWithAuthResult: setSignedInState(true)\n  //   // }\n  // };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange(setUser);\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  if (isLoaded(auth) && auth.currentUser !== null) {\n    return <span>User is logged in</span>;\n  } else {\n    return (\n      <span>\n        <LoginView />\n      </span>\n    );\n  }\n\n  // return (\n  //   <Router>\n  //     <Switch>\n  //       <Route path=\"/signedIn\">\n  //         <SignedIn />\n  //       </Route>\n\n  //       <Route path=\"/\">\n  //         <Container>\n  //           <Row>\n  //             <Col md={{ span: 6, offset: 3 }}>\n  //               <Card>\n  //                 <Card.Header>\n  //                   <h1 className=\"text-center\">My App</h1>\n  //                   <p className=\"text-center\">Please sign-in:</p>\n  //                 </Card.Header>\n  //                 <Card.Body>\n  //                   <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n  //                 </Card.Body>\n  //               </Card>\n  //             </Col>\n  //           </Row>\n  //         </Container>\n  //       </Route>\n  //     </Switch>\n  //   </Router>\n  // );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}