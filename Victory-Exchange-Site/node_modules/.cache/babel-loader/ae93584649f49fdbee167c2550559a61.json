{"ast":null,"code":"var _jsxFileName = \"/Users/dusty/Dropbox/Code/React/victory-exchange/auth-test/src/components/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Card, Row, Col } from 'react-bootstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'; //Routes\n\nimport SignedIn from './SignedIn'; //Firebase\n\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\nfunction App(props) {\n  const [user, setUser] = useState({\n    loggedIn: false\n  }); // Configure FirebaseUI.\n\n  const uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    // signInFlow: 'popup',\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n    signInSuccessUrl: '/signedIn',\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, {\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      requireDisplayName: true\n    }] // callbacks: {\n    //   // Avoid redirects after sign-in.\n    //   signInSuccessWithAuthResult: setSignedInState(true)\n    // }\n\n  };\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange();\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  function onAuthStateChange() {\n    return firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        console.log('The user is logged in');\n      } else {\n        console.log('The user is not logged in');\n      }\n    });\n  }\n\n  if (!user.loggedIn) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }\n    }, \"User is logged out\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 12\n      }\n    }, \"User is logged in\");\n  } // return (\n  //   <Router>\n  //     <Switch>\n  //       <Route path=\"/signedIn\">\n  //         <SignedIn />\n  //       </Route>\n  //       <Route path=\"/\">\n  //         <Container>\n  //           <Row>\n  //             <Col md={{ span: 6, offset: 3 }}>\n  //               <Card>\n  //                 <Card.Header>\n  //                   <h1 className=\"text-center\">My App</h1>\n  //                   <p className=\"text-center\">Please sign-in:</p>\n  //                 </Card.Header>\n  //                 <Card.Body>\n  //                   <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n  //                 </Card.Body>\n  //               </Card>\n  //             </Col>\n  //           </Row>\n  //         </Container>\n  //       </Route>\n  //     </Switch>\n  //   </Router>\n  // );\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dusty/Dropbox/Code/React/victory-exchange/auth-test/src/components/App.js"],"names":["React","useState","useEffect","Container","Card","Row","Col","BrowserRouter","Router","Switch","Route","SignedIn","StyledFirebaseAuth","firebase","App","props","user","setUser","loggedIn","uiConfig","signInSuccessUrl","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","provider","EmailAuthProvider","requireDisplayName","unsubscribe","onAuthStateChange","onAuthStateChanged","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,iBAA1C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBhB,QAAQ,CAAC;AAAEiB,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAAlC,CADkB,CAGlB;;AACA,QAAMC,QAAQ,GAAG;AACf;AACA;AACA;AACAC,IAAAA,gBAAgB,EAAE,WAJH;AAKf;AACAC,IAAAA,aAAa,EAAE,CACbR,QAAQ,CAACS,IAAT,CAAcC,kBAAd,CAAiCC,WADpB,EAEb;AAAEC,MAAAA,QAAQ,EAAEZ,QAAQ,CAACS,IAAT,CAAcI,iBAAd,CAAgCF,WAA5C;AAAyDG,MAAAA,kBAAkB,EAAE;AAA7E,KAFa,CANA,CAUf;AACA;AACA;AACA;;AAbe,GAAjB;AAgBAzB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0B,WAAW,GAAGC,iBAAiB,EAArC;AACA,WAAO,MAAM;AACXD,MAAAA,WAAW;AACZ,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;;AAOA,WAASC,iBAAT,GAA6B;AAC3B,WAAOhB,QAAQ,CAACS,IAAT,GAAgBQ,kBAAhB,CAAoCd,IAAD,IAAU;AAClD,UAAIA,IAAJ,EAAU;AACRe,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD;AACF,KANM,CAAP;AAOD;;AAED,MAAI,CAAChB,IAAI,CAACE,QAAV,EAAoB;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD,GAFD,MAEO;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAP;AACD,GAzCiB,CA2ClB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;;AAED,eAAeJ,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Card, Row, Col } from 'react-bootstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n//Routes\nimport SignedIn from './SignedIn';\n\n//Firebase\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\nfunction App(props) {\n  const [ user, setUser ] = useState({ loggedIn: false });\n\n  // Configure FirebaseUI.\n  const uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    // signInFlow: 'popup',\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n    signInSuccessUrl: '/signedIn',\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      { provider: firebase.auth.EmailAuthProvider.PROVIDER_ID, requireDisplayName: true }\n    ]\n    // callbacks: {\n    //   // Avoid redirects after sign-in.\n    //   signInSuccessWithAuthResult: setSignedInState(true)\n    // }\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChange();\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  function onAuthStateChange() {\n    return firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        console.log('The user is logged in');\n      } else {\n        console.log('The user is not logged in');\n      }\n    });\n  }\n\n  if (!user.loggedIn) {\n    return <span>User is logged out</span>;\n  } else {\n    return <span>User is logged in</span>;\n  }\n\n  // return (\n  //   <Router>\n  //     <Switch>\n  //       <Route path=\"/signedIn\">\n  //         <SignedIn />\n  //       </Route>\n\n  //       <Route path=\"/\">\n  //         <Container>\n  //           <Row>\n  //             <Col md={{ span: 6, offset: 3 }}>\n  //               <Card>\n  //                 <Card.Header>\n  //                   <h1 className=\"text-center\">My App</h1>\n  //                   <p className=\"text-center\">Please sign-in:</p>\n  //                 </Card.Header>\n  //                 <Card.Body>\n  //                   <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n  //                 </Card.Body>\n  //               </Card>\n  //             </Col>\n  //           </Row>\n  //         </Container>\n  //       </Route>\n  //     </Switch>\n  //   </Router>\n  // );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}