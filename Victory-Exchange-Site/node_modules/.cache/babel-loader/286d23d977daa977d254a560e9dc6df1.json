{"ast":null,"code":"var _jsxFileName = \"/Users/dusty/Dropbox/Code/React/victory-exchange/auth-test/src/components/App.js\";\nimport React, { useState, useEffect } from 'react'; // import React from 'react';\n// import { Container, Card, Row, Col } from 'react-bootstrap';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'; // import { useFirestoreConnect, isLoaded } from 'react-redux-firebase';\n//Routes\n\nimport SignedIn from './SignedIn';\nimport Login from './Login';\nimport Signup from './Signup';\nimport Home from './Home';\nimport { AuthProvider } from './Auth';\nimport PrivateRoute from './PrivateRoute';\nimport Header from './Header';\nimport Dashboard from './Dashboard';\nimport RequiredAuth from './RequireAuth'; //Firebase\n// import StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nimport firebase from 'firebase'; // function onAuthStateChange(callback) {\n//   return firebase.auth().onAuthStateChanged((user) => {\n//     if (user) {\n//       callback({ loggedIn: true });\n//       console.log('The user is logged in');\n//     } else {\n//       callback({ loggedIn: false });\n//       console.log('The user is signed out');\n//     }\n//   });\n// }\n\nfunction App(props) {\n  const [user, setUser] = useState({\n    loggedIn: false\n  }); // const auth = firebase.auth();\n  // Configure FirebaseUI.\n  // const uiConfig = {\n  //   // Popup signin flow rather than redirect flow.\n  //   // signInFlow: 'popup',\n  //   // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  //   signInSuccessUrl: '/signedIn',\n  //   // We will display Google and Facebook as auth providers.\n  //   signInOptions: [\n  //     firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n  //     { provider: firebase.auth.EmailAuthProvider.PROVIDER_ID, requireDisplayName: true }\n  //   ]\n  //   // callbacks: {\n  //   //   // Avoid redirects after sign-in.\n  //   //   signInSuccessWithAuthResult: setSignedInState(true)\n  //   // }\n  // };\n  // useEffect(() => {\n  //   const unsubscribe = onAuthStateChange(setUser);\n  //   return () => {\n  //     unsubscribe();\n  //   };\n  // }, []);\n  // if (isLoaded(auth) && auth.currentUser !== null) {\n  //   return <span>User is logged in</span>;\n  // } else {\n  //   return (\n  //     <span>\n  //       <LoginView />\n  //     </span>\n  //   );\n  // }\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    component: SignedIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/home\",\n    component: Home,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(RequiredAuth, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/dash\",\n    component: Dashboard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dusty/Dropbox/Code/React/victory-exchange/auth-test/src/components/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","SignedIn","Login","Signup","Home","AuthProvider","PrivateRoute","Header","Dashboard","RequiredAuth","firebase","App","props","user","setUser","loggedIn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;AACA;;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD,C,CACA;AAEA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,YAAT,QAA6B,QAA7B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,eAAzB,C,CAEA;AACA;;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBnB,QAAQ,CAAC;AAAEoB,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAAlC,CADkB,CAGlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAEd,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAEG,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,SAAS,EAAEI,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,CAFF,CADF;AAYD;;AAED,eAAeG,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import React from 'react';\n// import { Container, Card, Row, Col } from 'react-bootstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// import { useFirestoreConnect, isLoaded } from 'react-redux-firebase';\n\n//Routes\nimport SignedIn from './SignedIn';\nimport Login from './Login';\nimport Signup from './Signup';\nimport Home from './Home';\nimport { AuthProvider } from './Auth';\nimport PrivateRoute from './PrivateRoute';\nimport Header from './Header';\nimport Dashboard from './Dashboard';\nimport RequiredAuth from './RequireAuth';\n\n//Firebase\n// import StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\n// function onAuthStateChange(callback) {\n//   return firebase.auth().onAuthStateChanged((user) => {\n//     if (user) {\n//       callback({ loggedIn: true });\n//       console.log('The user is logged in');\n//     } else {\n//       callback({ loggedIn: false });\n//       console.log('The user is signed out');\n//     }\n//   });\n// }\n\nfunction App(props) {\n  const [ user, setUser ] = useState({ loggedIn: false });\n\n  // const auth = firebase.auth();\n\n  // Configure FirebaseUI.\n  // const uiConfig = {\n  //   // Popup signin flow rather than redirect flow.\n  //   // signInFlow: 'popup',\n  //   // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  //   signInSuccessUrl: '/signedIn',\n  //   // We will display Google and Facebook as auth providers.\n  //   signInOptions: [\n  //     firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n  //     { provider: firebase.auth.EmailAuthProvider.PROVIDER_ID, requireDisplayName: true }\n  //   ]\n  //   // callbacks: {\n  //   //   // Avoid redirects after sign-in.\n  //   //   signInSuccessWithAuthResult: setSignedInState(true)\n  //   // }\n  // };\n\n  // useEffect(() => {\n  //   const unsubscribe = onAuthStateChange(setUser);\n  //   return () => {\n  //     unsubscribe();\n  //   };\n  // }, []);\n\n  // if (isLoaded(auth) && auth.currentUser !== null) {\n  //   return <span>User is logged in</span>;\n  // } else {\n  //   return (\n  //     <span>\n  //       <LoginView />\n  //     </span>\n  //   );\n  // }\n\n  return (\n    <Router>\n      {/* <Header /> */}\n      <Switch>\n        <Route path=\"/login\" component={SignedIn} />\n        <Route path=\"/home\" component={Home} />\n        <RequiredAuth>\n          <Route path=\"/dash\" component={Dashboard} />\n        </RequiredAuth>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}